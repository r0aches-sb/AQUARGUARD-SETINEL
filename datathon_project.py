# -*- coding: utf-8 -*-
"""Datathon Project.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Rzxuf7iJSR8QTboDEpLBIzyas1e1jBZW

**Simulating Data Collection**
"""

# Importing Libraries
import time
import pandas as pd
import numpy as np
import random
from datetime import datetime, timedelta
import matplotlib.pyplot as plt

# Set random seed for reproducibility
np.random.seed(42)

# Generate timestamps
start_time = datetime.now()
timestamps = [start_time + timedelta(seconds=i) for i in range(3600)]

# Simulate water level data (in cm)
water_levels = np.random.normal(loc=100, scale=10, size=3600)

# Simulate water flow data (in L/min)
flow_rates = np.random.normal(loc=50, scale=5, size=3600)

# Simulate clog detection data (0: no clog, 1: clog)
clog_status = np.random.choice([0, 1], size=3600, p=[0.95, 0.05])

# Create a DataFrame
df = pd.DataFrame({
    'timestamp': timestamps,
    'water_level': water_levels,
    'flow_rate': flow_rates,
    'clog_status': clog_status
})

# Convert timestamp column to datetime format (just to be sure)
df['timestamp'] = pd.to_datetime(df['timestamp'])

# Set the timestamp as the index
df.set_index('timestamp', inplace=True)

# Display the first few rows of the DataFrame
print(df.head())

"""***Data Processing and Analysis***"""

# Plot water levels
plt.figure(figsize=(12, 6))
plt.plot(df.index, df['water_level'], label='Water Level (cm)')
plt.xlabel('Time')
plt.ylabel('Water Level (cm)')
plt.title('Water Level Over Time')
plt.legend()
plt.show()

# Plot flow rates
plt.figure(figsize=(12, 6))
plt.plot(df.index, df['flow_rate'], label='Flow Rate (L/min)', color='orange')
plt.xlabel('Time')
plt.ylabel('Flow Rate (L/min)')
plt.title('Flow Rate Over Time')
plt.legend()
plt.show()

# Plot clog status
plt.figure(figsize=(12, 6))
plt.plot(df.index, df['clog_status'], label='Clog Status', color='red')
plt.xlabel('Time')
plt.ylabel('Clog Status')
plt.title('Clog Status Over Time')
plt.legend()
plt.show()

"""***Anomaly Detection and Predictive Analytics***"""

# Define thresholds for anomalies
water_level_threshold = 120  # cm
flow_rate_threshold = 70  # L/min

# Detect anomalies
df['anomaly'] = ((df['water_level'] > water_level_threshold) | (df['flow_rate'] > flow_rate_threshold) | (df['clog_status'] == 1)).astype(int)

# Plot anomalies
anomalies = df[df['anomaly'] == 1]
plt.figure(figsize=(12, 6))
plt.plot(df['timestamp'], df['water_level'], label='Water Level (cm)')
plt.scatter(anomalies['timestamp'], anomalies['water_level'], color='red', label='Anomalies')
plt.xlabel('Time')
plt.ylabel('Water Level (cm)')
plt.title('Anomaly Detection in Water Levels')
plt.legend()
plt.show()

# Forecast potential flood events
# For simplicity, let's assume if there are anomalies detected consecutively for more than 10 minutes, we consider it a potential flood risk
df['consecutive_anomalies'] = df['anomaly'].rolling(window=600).sum()
flood_risks = df[df['consecutive_anomalies'] > 10]

# Plot potential flood risks
plt.figure(figsize=(12, 6))
plt.plot(df['timestamp'], df['water_level'], label='Water Level (cm)')
plt.scatter(flood_risks['timestamp'], flood_risks['water_level'], color='red', label='Potential Flood Risks')
plt.xlabel('Time')
plt.ylabel('Water Level (cm)')
plt.title('Potential Flood Risks')
plt.legend()
plt.show()

"""**Real-time data simulation and processing**"""

import numpy as np
import pandas as pd
from datetime import datetime, timedelta
import matplotlib.pyplot as plt
import time

# Set random seed for reproducibility
np.random.seed(42)

# Define thresholds for anomalies
water_level_threshold = 120  # cm
flow_rate_threshold = 70  # L/min

# Function to generate simulated data
def generate_data(current_time):
    water_level = np.random.normal(loc=100, scale=10)
    flow_rate = np.random.normal(loc=50, scale=5)
    clog_status = np.random.choice([0, 1], p=[0.95, 0.05])
    return current_time, water_level, flow_rate, clog_status

# Function to detect anomalies
def detect_anomaly(water_level, flow_rate, clog_status):
    return (water_level > water_level_threshold) or (flow_rate > flow_rate_threshold) or (clog_status == 1)

# Initialize a list to store data
data = []

# Real-time data simulation and processing
start_time = datetime.now()
for i in range(600):  # Simulate for one hour
    current_time = start_time + timedelta(seconds=i)
    timestamp, water_level, flow_rate, clog_status = generate_data(current_time)
    anomaly = detect_anomaly(water_level, flow_rate, clog_status)
    data.append([timestamp, water_level, flow_rate, clog_status, anomaly])
    time.sleep(1)  # Uncomment this for real-time simulation

# Convert list to DataFrame
df = pd.DataFrame(data, columns=['timestamp', 'water_level', 'flow_rate', 'clog_status', 'anomaly'])

# Plot water levels
plt.figure(figsize=(12, 6))
plt.plot(df['timestamp'], df['water_level'], label='Water Level (cm)')
plt.xlabel('Time')
plt.ylabel('Water Level (cm)')
plt.title('Water Level Over Time')
plt.legend()
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

# Plot flow rates
plt.figure(figsize=(12, 6))
plt.plot(df['timestamp'], df['flow_rate'], label='Flow Rate (L/min)', color='orange')
plt.xlabel('Time')
plt.ylabel('Flow Rate (L/min)')
plt.title('Flow Rate Over Time')
plt.legend()
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

# Plot clog status
plt.figure(figsize=(12, 6))
plt.plot(df['timestamp'], df['clog_status'], label='Clog Status', color='red')
plt.xlabel('Time')
plt.ylabel('Clog Status')
plt.title('Clog Status Over Time')
plt.legend()
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

# Plot anomalies
anomalies = df[df['anomaly'] == True]
plt.figure(figsize=(12, 6))
plt.plot(df['timestamp'], df['water_level'], label='Water Level (cm)')
plt.scatter(anomalies['timestamp'], anomalies['water_level'], color='red', label='Anomalies')
plt.xlabel('Time')
plt.ylabel('Water Level (cm)')
plt.title('Anomaly Detection in Water Levels')
plt.legend()
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

# Forecast potential flood events
# Consider potential flood risk if anomalies are detected consecutively for more than 10 minutes
df['consecutive_anomalies'] = df['anomaly'].rolling(window=600).sum()
flood_risks = df[df['consecutive_anomalies'] > 10]

# Plot potential flood risks
plt.figure(figsize=(12, 6))
plt.plot(df['timestamp'], df['water_level'], label='Water Level (cm)')
plt.scatter(flood_risks['timestamp'], flood_risks['water_level'], color='red', label='Potential Flood Risks')
plt.xlabel('Time')
plt.ylabel('Water Level (cm)')
plt.title('Potential Flood Risks')
plt.legend()
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

"""
*Highlighting Clog Status*"""

#Adjusting Time Intervals
plt.figure(figsize=(12, 6))
plt.plot(df['timestamp'], df['water_level'], label='Water Level (cm)')
plt.scatter(anomalies['timestamp'], anomalies['water_level'], color='red', label='Anomalies')
plt.xlabel('Time')
plt.ylabel('Water Level (cm)')
plt.title('Anomaly Detection in Water Levels')
plt.xticks(rotation=45)  # Rotate x-axis labels for better readability
plt.legend()
plt.tight_layout()
plt.show()


# Highlighting Clog Status
clogs = df[df['clog_status'] == 1]
plt.figure(figsize=(12, 6))
plt.plot(df['timestamp'], df['water_level'], label='Water Level (cm)')
plt.scatter(anomalies['timestamp'], anomalies['water_level'], color='red', label='Anomalies')
plt.scatter(clogs['timestamp'], clogs['water_level'], color='green', label='Clogs', marker='x')
plt.xlabel('Time')
plt.ylabel('Water Level (cm)')
plt.title('Anomaly Detection with Clog Status')
plt.xticks(rotation=45)
plt.legend()
plt.tight_layout()
plt.show()

import numpy as np
import pandas as pd
from datetime import datetime, timedelta
import matplotlib.pyplot as plt
import time

# Set random seed for reproducibility
np.random.seed(42)

# Define thresholds for anomalies
water_level_threshold = 120  # cm
flow_rate_threshold = 70  # L/min

# Function to generate simulated data
def generate_data(current_time):
    water_level = np.random.normal(loc=100, scale=10)
    flow_rate = np.random.normal(loc=50, scale=5)
    clog_status = np.random.choice([0, 1], p=[0.95, 0.05])
    return current_time, water_level, flow_rate, clog_status

# Function to detect anomalies
def detect_anomaly(water_level, flow_rate, clog_status):
    return (water_level > water_level_threshold) or (flow_rate > flow_rate_threshold) or (clog_status == 1)

# Function to send an alert
def send_alert(timestamp, water_level, flow_rate, clog_status):
    print(f"ALERT! Anomaly detected at {timestamp}")
    print(f"Water Level: {water_level} cm, Flow Rate: {flow_rate} L/min, Clog Status: {clog_status}")

# Initialize a list to store data
data = []

# Real-time data simulation and processing
start_time = datetime.now()
for i in range(600):  # Simulate for one hour
    current_time = start_time + timedelta(seconds=i)
    timestamp, water_level, flow_rate, clog_status = generate_data(current_time)
    anomaly = detect_anomaly(water_level, flow_rate, clog_status)
    data.append([timestamp, water_level, flow_rate, clog_status, anomaly])

    if anomaly:
        send_alert(timestamp, water_level, flow_rate, clog_status)

    time.sleep(1)  # Uncomment this for real-time simulation

# Convert list to DataFrame
df = pd.DataFrame(data, columns=['timestamp', 'water_level', 'flow_rate', 'clog_status', 'anomaly'])

# Plot water levels
plt.figure(figsize=(12, 6))
plt.plot(df['timestamp'], df['water_level'], label='Water Level (cm)')
plt.xlabel('Time')
plt.ylabel('Water Level (cm)')
plt.title('Water Level Over Time')
plt.legend()
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

# Plot flow rates
plt.figure(figsize=(12, 6))
plt.plot(df['timestamp'], df['flow_rate'], label='Flow Rate (L/min)', color='orange')
plt.xlabel('Time')
plt.ylabel('Flow Rate (L/min)')
plt.title('Flow Rate Over Time')
plt.legend()
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

# Plot clog status
plt.figure(figsize=(12, 6))
plt.plot(df['timestamp'], df['clog_status'], label='Clog Status', color='red')
plt.xlabel('Time')
plt.ylabel('Clog Status')
plt.title('Clog Status Over Time')
plt.legend()
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

# Plot anomalies
anomalies = df[df['anomaly'] == True]
plt.figure(figsize=(12, 6))
plt.plot(df['timestamp'], df['water_level'], label='Water Level (cm)')
plt.scatter(anomalies['timestamp'], anomalies['water_level'], color='red', label='Anomalies')
plt.xlabel('Time')
plt.ylabel('Water Level (cm)')
plt.title('Anomaly Detection in Water Levels')
plt.legend()
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

# Forecast potential flood events
# Consider potential flood risk if anomalies are detected consecutively for more than 10 minutes
df['consecutive_anomalies'] = df['anomaly'].rolling(window=600).sum()
flood_risks = df[df['consecutive_anomalies'] > 10]

# Plot potential flood risks
plt.figure(figsize=(12, 6))
plt.plot(df['timestamp'], df['water_level'], label='Water Level (cm)')
plt.scatter(flood_risks['timestamp'], flood_risks['water_level'], color='red', label='Potential Flood Risks')
plt.xlabel('Time')
plt.ylabel('Water Level (cm)')
plt.title('Potential Flood Risks')
plt.legend()
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

# Adjusting Time Intervals
plt.figure(figsize=(12, 6))
plt.plot(df['timestamp'], df['water_level'], label='Water Level (cm)')
plt.scatter(anomalies['timestamp'], anomalies['water_level'], color='red', label='Anomalies')
plt.xlabel('Time')
plt.ylabel('Water Level (cm)')
plt.title('Anomaly Detection in Water Levels')
plt.xticks(rotation=45)  # Rotate x-axis labels for better readability
plt.legend()
plt.tight_layout()
plt.show()

# Highlighting Clog Status
clogs = df[df['clog_status'] == 1]
plt.figure(figsize=(12, 6))
plt.plot(df['timestamp'], df['water_level'], label='Water Level (cm)')
plt.scatter(anomalies['timestamp'], anomalies['water_level'], color='red', label='Anomalies')
plt.scatter(clogs['timestamp'], clogs['water_level'], color='green', label='Clogs', marker='x')
plt.xlabel('Time')
plt.ylabel('Water Level (cm)')
plt.title('Anomaly Detection with Clog Status')
plt.xticks(rotation=45)
plt.legend()
plt.tight_layout()
plt.show()